
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum USER__ROLE {
  ADMIN 
  STUDENT
  MEMBER
}
model User{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user__name  String @unique
  first__name String
  last__name  String
  email__id   String @unique
  password    String
  photo__URL  String
  phone__numb Int
  gender      String
  role        USER__ROLE @default(STUDENT)
  postedBlogs Blog[]
}


model Blog{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String
  slug          String @unique
  sub_title     String
  readTime      String 
  tags          String[]
  html          String
  cover         String
  thumbnail     String
  views         Int @default(0)
  creator User  @relation(fields: [authorId], references: [id])
  authorId      String  @db.ObjectId
}

// model Courses {
//   id              String @id @default(auto()) @map("_id") @db.ObjectId
//   title           String
//   slug            String 
//   category        String
//   subtitle        String
//   tags            String[]
//   courseCover     String
//   desc            String
//   marketPlace     String[]
//   quize           String[]
//   review          Int
//   topic           Int
//   lession         Int
//   video           Int
//   fee             Int
//   disCountFee     Int
//   rating          Int
//   instructorId    String @db.ObjectId
//   instructor      Instructors @relation(fields: [instructorId], references: [id])    
//   module          Module[]

// }
// model Module{
//   id            String @id @default(auto()) @map("_id") @db.ObjectId
//   title         String
//   slug          String
//   videos        String
//   course Courses @relation(fields: [courseID], references: [id])         
//   courseID        String @db.ObjectId
//   quize          Quize[]
  
// }
// model Instructors{
//   id                          String @id @default(auto()) @map("_id") @db.ObjectId
//   name                        String
//   username                    String  @unique
//   email                       String
//   phone                       String
//   instructorphotoURL          String
//   instructorspecialty         String
//   instructorintroduction      String
//   instructorlevel             String
//   instructorEducationStatus   String[]
//   isVerified                  Boolean
//   rating                      Int
//   courses                     Courses[]
// }

// model Quize{
//   id                String @id @default(auto()) @map("_id") @db.ObjectId
//   question          String 
//   answer            String[]
//   moduleID          String @db.ObjectId 
//   module  Module @relation(fields: [moduleID], references: [id])
// }

model ITCOURSE{
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    instructorSpecialty   String
    instructor    String
    instructorRole  String
    instructorIntroduction  String
    instructorName   String
    category  String
    tag String
    title String
    slug String
    subTitle String
    courseCover String
    desc String
    techingListTitle String
    techingList1 String
    techingList2 String
    techingList3 String
    techingList4 String
    techingList5 String
    techingList6 String
    techingList7 String
    techingList8 String
    careersTitle String
    careerDesc String 
    upWorkImg String
    fiverrImg String
    freeLanceImg String
    peoplePerHourImg String
    toptalImg String
    design99Img String
    certificateImg String
    certificateTitle String
    certificateDesc String
    videoIcon String
    pdfIcon String
    bookIcon String
    techingSoftwareDesc String  
    requirementDesc String
    review Int
    topic Int
    lession Int
    video Int
    quize Int
    fee Int
    discountFee  Int
}